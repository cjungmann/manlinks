#!/usr/bin/env bash

# Load appropriate sources even if script is a symlink:
declare SFOLDER=$( readlink -f "$0" )
SFOLDER="${SFOLDER%/*}/sources"
source "$SFOLDER"/include

declare -a Man_Menu
declare COL_EMP=$'\e[36;1m'
declare COL_OFF=$'\e[m'

manlinks_display_line()
{
   local -i hilite="$1"
   local -i padding="$2"

   local title="$3"
   local desc="$4"

   if [ "$hilite" -ne 0 ]; then
       echo -n $'\e[44m'
   fi

   # allowance for abandoning description after title
   local -i gutter=3

   # print emphasized title
   echo -n "${COL_EMP}"

   local -i len_title="${#title}"
   local -i trim

   (( trim = len_title - padding ))
   if (( trim > -gutter )); then
       # not enough room for desc
       if (( trim > 0 )); then
           echo -n "${title:0: -$trim}"
       else
           echo -n "$title"
       fi
   else
       echo -n "$title"
   fi

   echo -n "${COL_OFF}"

   # print description if enough room
   if (( trim < -gutter )); then
       echo -n ": "
       (( padding -= ( len_title + 2 ) ))

       local -i len_desc="${#desc}"

       if (( len_desc < padding )); then
           echo -n "${desc}"
       else
           (( trim = len_desc - padding ))
           echo -n "${desc:0: -$trim}"
       fi
   fi

   echo $'\e[m'
}

# Key action function invoked with item selection
# Args
#    (string)      A character string representing the keypress that
#                  triggers this action
#    (name)        name of the current lui_list
#    (integer)     row number of the currently indicated lui_list row
#    (various...)  optional extra parameters passed to lui_list_generic()
#                  following the first five parameters.
#
# Returns 0 to continue the interaction
manlinks_execute_line()
{
    local keyp="$1"
    local list_name="$2"
    local -i row_ndx="$3"

    local -i list_ndx
    lui_list_ndx_from_row_cell_nameref "list_ndx" "Man_Menu" "$row_ndx" 2

    local cmd="${Man_Menu[$list_ndx]}"
    local packed_args="${Man_Menu[$((list_ndx+1))]}"

    local delimiter="${packed_args:0:1}"
    packed_args="${packed_args:1}"

    # Only change IFS until the array is initialized
    local OIFS="$IFS"
    local IFS="$delimiter"
    local -a args=( $packed_args )
    IFS="$OIFS"

    "$cmd" "${args[@]}"
}

#########################
#         Main          #
# Execution begins here #
#########################

# @def Execution packed-array element
#
# Since lui_list_generic needs a fixed-width array table,
# the fourth field of each row will be a packed array
# of options to be passed to the command in the third field.
#
# Since the same IFS character may not be appropriate for
# all argument lists, the first character of the packed-array
# is the IFS character to use to split the array.
Man_Menu=(
    4 0

    "Man Pager Directions"
    "man can issue pager directions, including options passed directly to the pager."
    "man"
    "|-P|less -p '^\ +-P pager'|man"

    "Bash Here documents"
    "Read about Bash handling of here documents."
    "man"
    "|-P|less -p 'Here Documents'|bash"

    "ANSI-C quoting"
    "Quoting formulae for placing control characters"
    "man"
    "|-P|less -p Words of the form $\'string|bash"

    "Bash Parameter Expansion"
    "\$-prefixed variable manipulation syntax"
    "man"
    "|-P|less -p ^\ +Parameter\ Expansion|bash"

    "Bash Conditional Expressions"
    "List of options executing different tests"
    "man"
    "|-P|less -p ^CONDITIONAL\ EXPRESSIONS|bash"

    "Bash Signal Handling"
    "Signals that can be trapped in a Bash script"
    "man"
    "|-P|less -p ^SIGNALS|bash"

    "Bash Regular Expression [[ ]]"
    "Notation for applying regular expression searches"
    "man"
    "|-P|less -p ^\ +[[\ expression|bash"

    "Bash Regular Expression flavor"
    "Bash regular expressions are of the POSIX extended flavor"
    "man"
    "|7|regex"

    "This test title is very long to see how the line displayer handles text longer than the screen."
    "Short description"
    "man"
    "|man"

    "This test title is very long to see how the line displayer handles text lon"
    "Short description"
    "man"
    "|man"
)
lui_list_init "Man_Menu"

declare -a Man_Keys_List=(
    $'\e|q:LUI_ABORT'
    $'\n:manlinks_execute_line'
)

declare -a Man_Menu_Args=(
    ""                      # ignoring selection
    "Man_Menu"              # guiding lui_list
    0 0                     # row and column values to trigger centering
    20                      # limit of lines to be displayed at once
    80                      # character-count limit for each line
    "manlinks_display_line" # custom line displayer
    "Man_Keys_List"         # name of keylist array
)

# Setup for unexpected termination
save_console_state_hide_cursor
trap restore_console_state_show_cursor SIGINT
trap restore_console_state_show_cursor EXIT

reset_screen

lui_list_generic "${Man_Menu_Args[@]}"

read -n1 -p To\ continue

reset_screen
