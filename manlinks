#!/usr/bin/env bash

# Load appropriate sources even if script is a symlink:
declare AFOLDER=$( readlink -f "$0" )   # App's true location
AFOLDER="${AFOLDER%/*}"
SFOLDER="${AFOLDER}/sources"
source "$SFOLDER"/include

declare -a Man_Keys_List
declare -a Man_Menu
declare COL_EMP=$'\e[36;1m'

declare COL_BOLD="$LESS_TERMCAP_md"
declare COL_ITAL="$LESS_TERMCAP_us"
declare COL_END="$LESS_TERMCAP_me"

declare COL_BOLD=$'\e[32;1m'
declare COL_ITAL=$'\e[36;1m'
declare COL_OFF=$'\e[m'


to_continue() { read -n1 -p Press\ any\ key; }

# Package the condition identifying ignored lines for open_manlinks_file()
#
# Args
#    (string):   contents of a line of a manlinks file
manlinks_skip_line()
{
    local nospaces="${1// /}"
    [ "${1:0:1}" == "#" ] || [ "${#nospaces}" -eq 0 ]
}

# Wrapper around default URL displayer that hides error messages.
#
# Args
#    (string):   URL to webpage
browser()
{
    local URL="$1"
    xdg-open "$1" 2>/dev/null 1>&2
}

# @def Manlink lui_list
#
# This list is a 4 field list, each record has the following fields:
# - title
# - short description
# - command name (usually 'man', but could be 'info' or something else)
# - arguments for the command
#
# The fourth field, the packed arguments array, needs some explanation.
# The arguments field is a packed array, indicating a delimiter
# character that will be used as the IFS value to split the string into
# an array.
#
# The first character of the fourth field is the delimiter, which allows
# flexibility if another delimiter is included in the data.  The delimiter
# is required (for now) even for single-argument packed arrays.

# @def Manlinks files
#
# Manlinks files are identified by a shebank on the first line:
# #!manlinks
# The manlinks line can be followed by a file variables line like:
# # -*- mode: sh -*-
#
# Like shell scripts, a line that begins with '#' is considered to
# be a comment and will be ignored, though unlike shell scripts, a
# '#' elsewhere in the line will NOT introduce a comment.  Empty
# lines will also be ignored.
#
# The first non-ignored line of characters will be used as an
# introduction to the interaction.  This may change in order to
# allow multi-paragraph introductions, but for now it is only a
# single paragraph that might extend multiple lines.
#
# The first numeral or pair of numerals will be interpreted as the
# columns and rows values in a lui_list definition.  The initial
# design is for four (4) fields per row.
#
# When reading the remainder of the manlinks file, the program will
# simply append each following non-ignored line as an element in the
# array, but the data should be organized according to the columns
# value.
#
# It would be reasonable to use extra columns, just use an appropriate
# columns value along with a matching organization of fields.
#
# There are a few manlinks sample files along with the script.  The
# files are recognized by their shebangs rather than their extensions,
# but for ease of reference here, the sample manlinks files have an
# extension '.mlnk'.

# Search a directory for manlink files, identified by shebang '#!manlinks'
#
# This function returns the list of manlinks files found in the
# indicated directory.
#
# Args
#    (name-out):  name of array in which manlinks file are added
#    (string):    path to search
identify_manlinks_files()
{
    local list_name="$1"
    local -n fl_links="$list_name"
    local path="${2:-.}"

    # Create a lui_list if the array is empty
    if [ "${#fl_links[@]}" -eq 0 ]; then
        fl_links=( 4 0 )
    fi

    local -a raw=( "${path}/"* )

    local file line title desc
    local -i is_manlinks
    for file in "${raw[@]}"; do
        is_manlinks=0
        if [ -f "$file" ]; then
            title=
            desc=
            while IFS= read line; do
                if [ "$is_manlinks" -eq 0 ]; then
                    if [ "$line" == '#!manlinks' ]; then
                        is_manlinks=1
                    else
                        break
                    fi
                elif manlinks_skip_line "$line"; then
                    continue
                elif [[ "$line" =~ ^[[:digit:]]+(\ +[[:digit:]]+)? ]]; then
                    # Encountering lui_list dimensions means file descriptive text is done
                    # Improvise descriptive info:
                    if [ -z "$title" ]; then
                        title="$file"
                    fi
                    break
                elif [ -z "$title" ]; then
                    title="$line"
                elif [ -z "$desc" ]; then
                    desc="$line"
                    break
                fi
            done< "$file"

            if [ -n "$title" ]; then
                fl_links+=( "$title" "$desc" "manlinks" "|$file" )
            fi
        fi
    done

    lui_list_init "$list_name"

    return 0
}

# Create a lui_list object from the contents of a named manlinks file.
#
# The lui_list will be initialized after the contents are read in.
#
# Args
#    (name-out): name of array variable in which the lui_list will be
#                created.
#    (name-out)  (optional) name of array of descriptive text collected
#                from manlinks file.  Attempt to fill made only if a
#                name is provided.
#    (string):   path to manlinks file
open_manlinks_file()
{
    local list_name="$1"
    local paras_name="$2"
    local file_name="$3"

    local -n omf_list="$list_name"
    omf_list=()

    local -i pre_intro=1
    is_pre_intro() { [ "$pre_intro" -gt 0 ]; }

    local -i rows=-1 cols=0
    past_dims() { [ "$rows" -ge 0 ]; }

    local -a omf_intro=()
    local -i intro_progress=0
    past_intro() { [ "$intro_progress" -gt 0 ]; }

    local line
    while IFS= read -r line; do
        if past_dims; then
            if manlinks_skip_line "$line"; then continue; fi

            if [[ "$line" =~ ^\"(.*)\"$ ]] || [[ ^"$line" =~ \"(.*)\"$ ]]; then
                line="${BASH_REMATCH[1]}"
            fi
            omf_list+=( "$line" )
        elif is_pre_intro && manlinks_skip_line "$line"; then
            continue
        elif ! past_dims; then
            pre_intro=0
            if [[ "$line" =~ ^([[:digit:]]+)(\ +([[:digit:]]+))?$ ]]; then
                if ! past_intro; then
                    bind_array_to_paragraphs "$paras_name" "omf_intro"
                    # colorize_array "$paras_name"
                    (( ++intro_progress ))
                fi

                if [ "$cols" -eq 0 ]; then
                    cols="${BASH_REMATCH[1]}"
                    if [ "${#BASH_REMATCH[3]}" -gt 0 ] && value_is_int "${BASH_REMATCH[3]}"; then
                        rows="${BASH_REMATCH[3]}"
                    fi
                else
                    rows="${BASH_REMATCH[1]}"
                fi

                if [ "$rows" -ge 0 ]; then
                    omf_list+=( "$cols" "$rows" )
                fi
            else
                omf_intro+=( "$line" )
            fi
        fi
    done < "$file_name"

    lui_list_init "$list_name"
}


# Display line function for manlinks
#
# Hilight the title part to set it off from the description
#
# Args
#    (integer):    flag (1 for true, 0 for false) if line is target
#    (integer):    width of characters to print
#    (various):    elements of selected row start here
manlinks_display_line()
{
   local -i hilite="$1"
   local -i padding="$2"

   local title="$3"
   local desc="$4"

   local col_title="$COL_EMP"

   if [ "$hilite" -ne 0 ]; then
       echo -n $'\e[46m'
       col_title=$'\e[37;1m'
   fi

   # allowance for abandoning description after title
   local -i gutter=3

   # print emphasized title
   local -i len_title="${#title}"
   local -i trim
   (( trim = len_title - padding ))

   echo -n "${col_title}"

   if (( trim > 0 )); then
       echo -n "${title:0: -$trim}"
   else
       echo -n "$title"
   fi

   echo -n "${COL_OFF}"

   # print description if enough room
   if (( trim < -gutter )); then
       echo -n ": "
       (( padding -= ( len_title + 2 ) ))

       local -i len_desc="${#desc}"

       if (( len_desc < padding )); then
           echo -n "${desc}"
       else
           (( trim = len_desc - padding ))
           echo -n "${desc:0: -$trim}"
       fi
   fi

   echo $'\e[m'
}

# Key action function invoked with item selection
# Args
#    (string)      A character string representing the keypress that
#                  triggers this action
#    (name-in)     name of the current lui_list
#    (integer)     row number of the currently indicated lui_list row
#    (various...)  optional extra parameters passed to lui_list_generic()
#                  following the first five parameters.
#
# Returns 0 to continue the interaction
manlinks_execute_line()
{
    local keyp="$1"
    local list_name="$2"
    local -i row_ndx="$3"

    local -i list_ndx
    lui_list_ndx_from_row_cell_nameref "list_ndx" "$list_name" "$row_ndx" 2

    local -n mel_menu="$list_name"
    local cmd="${mel_menu[$list_ndx]}"
    local packed_args="${mel_menu[$((list_ndx+1))]}"

    local delimiter="${packed_args:0:1}"
    packed_args="${packed_args:1}"

    # Only change IFS until the array is initialized
    local OIFS="$IFS"
    local IFS="$delimiter"
    local -a args=( $packed_args )
    IFS="$OIFS"

    if [ "$cmd" == "manlinks" ]; then
        local -a submenu
        local -a mel_paras
        local filepath="${args[0]}"

        open_manlinks_file "submenu" "mel_paras" "$filepath"

        pushd "${filepath%/.*}"
        manlinks_start_interaction "submenu" "mel_paras"
        popd
    else
        "$cmd" "${args[@]}"
    fi
}

# Packaged initialization of a lui_list_generic given a lui_list
# and an optional paragraphs array.
#
# Args
#    (name-out):  name of initialized manlinks lui_list from which
#                 the interaction will be built
#    (name-in):   optional name of an array bound paragraphs.
manlinks_start_interaction()
{
    local lui_list_name="$1"
    local paras_name="$2"

    local -a args=(
        ""
        "$lui_list_name"
        0 0
        20 80         # limits of rows and columns
        "manlinks_display_line"
        "Man_Keys_List"
        "$paras_name"
    )

    reset_screen

    lui_list_generic "${args[@]}"
    reset_screen
}

# Collect manfiles from invocation directory as well as the manlinks
# application directory.  This allows for project-specific manlinks files
# that won't be included outside of that project's directory.
show_manlinks_files()
{
    local -a manlinks_list
    if [ "$PWD" != "$AFOLDER" ]; then
        identify_manlinks_files "manlinks_list" "$PWD"
    fi

    identify_manlinks_files "manlinks_list" "$AFOLDER"

    local -a smf_paras
    bind_paragraphs "smf_paras" <<EOF
This is a list of available manlinks files.  Select one of these
files to see the links included in the file.
EOF

    pushd "$AFOLDER"
    manlinks_start_interaction "manlinks_list" "smf_paras"
    popd
}


#########################
#         Main          #
# Execution begins here #
#########################

# @def Execution packed-array element
#
# Since lui_list_generic needs a fixed-width array table,
# the fourth field of each row will be a packed array
# of options to be passed to the command in the third field.
#
# Since the same IFS character may not be appropriate for
# all argument lists, the first character of the packed-array
# is the IFS character to use to split the array.
Man_Keys_List=(
    $'\e|q:LUI_ABORT'
    $'\n:manlinks_execute_line'
)

# Setup for unexpected termination
save_console_state_hide_cursor
trap restore_console_state_show_cursor SIGINT
trap restore_console_state_show_cursor EXIT

reset_screen

if [ "$#" -gt 0 ]; then
    declare file_name_arg="$1"
    declare -a links_list
    declare -a file_paras

    open_manlinks_file "links_list" "file_paras" "$file_name_arg"

    pushd "${file_name_arg%/.*}"
    manlinks_start_interaction "links_list" "file_paras"
    popd
else
    show_manlinks_files
fi

reset_screen
