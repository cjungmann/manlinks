#!/usr/bin/env bash

# Load appropriate sources even if script is a symlink:
declare AFOLDER SFOLDER AppPath
AFOLDER=$( readlink -f "$0" )   # App's true location
AFOLDER="${AFOLDER%/*}"
SFOLDER="${AFOLDER}/sources"
source "$SFOLDER"/include
source "${AFOLDER}/manlinks_file"
AppPath="${AFOLDER}/manlinks"


declare -a Man_Keys_List
declare -a Man_Menu
declare COL_EMP=$'\e[36;1m'

declare COL_BOLD COL_ITAL COL_LETTER_HI COL_TITLE COL_TITLE_HI COL_OFF

# Set color variables from LESS_TERMCAPs with hard-coded fallback
#
# Args
#    (name-out):  variable in which the color value will be returned
#    (string):    two-letter suffix of intended LESS_TERMCAP_ variable
#    (string):    optional color string to use if LESS_TERMCAP_ empty or not found
col_name_set()
{
    local -n colvar="$1"
    local ltc_name="LESS_TERMCAP_$2"
    local ltc_val="${!ltc_name}"
    local altval="$3"

    if [ -n "${ltc_val}" ]; then
        colvar="${ltc_val}"
    else
        colvar="$altval"
    fi
}

col_name_set "COL_BOLD"      "md" $'\e[32;1m'
col_name_set "COL_ITAL"      "us" $'\e[36;1m'

col_name_set "COL_LETTER_HI" ""   $'\e[38;5;208m'
col_name_set "COL_TITLE"     "vb" $'\e[44;37;1m'
col_name_set "COL_TITLE_HI"  ""   $'\e[33;1m'
col_name_set "COL_OFF"       "me" $'\e[m'



to_continue() { read -n1 -p Press\ any\ key; }

# Check if command ultimately resolves to this manlinks script
#
# Args
#    (string):  command name
is_manlinks_cmd()
{
    local cmd="$1"
    local path=$( which "$1" | xargs -I{} readlink {} )
    [ "$path" == "${AppPath}" ]
}

# Package the condition identifying ignored lines for open_manlinks_file()
#
# Args
#    (string):   contents of a line of a manlinks file
manlinks_skip_line()
{
    local nospaces="${1// /}"
    [ "${1:0:1}" == "#" ] || [ "${#nospaces}" -eq 0 ]
}

# Wrapper around default URL displayer that hides error messages.
#
# Args
#    (string):   URL to webpage
browser()
{
    local URL="$1"
    xdg-open "$1" 2>/dev/null 1>&2
}

# Hilight active key for each menu item
#
# Args
#    (name-io):  name of paragraph array
#    (string):   color of hilight
#    (string):   color of non-hilight color
massage_title_line()
{
    local -n utl_paras="$1"

    if [ "${#utl_paras[@]}" -gt 0 ]; then
        local line="${utl_paras[0]}"
        line="${line/&/}"
        utl_paras[0]="${COL_TITLE}  $line  ${COL_OFF}"
    fi
}

# Hilight active key for each menu item
#
# Args
#    (name-io):  name of paragraph array
#    (string):   color of hilight
#    (string):   color of non-hilight color
massage_menu_name()
{
    local -n utl_str="$1"
    local str="$utl_str"
    if [ -n "$str" ]; then
        hilite_prefixed_char "$1" "$str" "$2" "$3"
    fi
}


# Search a directory for manlink files, identified by shebang '#!manlinks'
#
# This function returns the list of manlinks files found in the
# indicated directory.
#
# The result will be a lui_list of 4-field rows:
#   - title
#   - description
#   - command used to view contents
#   - delimited list of arguments to viewer command.   The first
#     character will be used as the delimiter that separates the
#     arguments.
#
# Args
#    (name-out):  name of array in which manlinks file are added
#    (string):    path to search
identify_manlinks_files()
{
    local list_name="$1"
    local -n fl_links="$list_name"
    local path="${2:-.}"

    # Create a lui_list if the array is empty
    if [ "${#fl_links[@]}" -eq 0 ]; then
        fl_links=( 4 0 )
    fi

    local -a raw=( "${path}/"* )

    local file line title desc
    local -i is_manlinks
    for file in "${raw[@]}"; do
        local dir
        is_manlinks=0
        if [ -f "$file" ]; then
            title=
            desc=
            while IFS= read line; do
                if [ "$is_manlinks" -eq 0 ]; then
                    if [ "$line" == '#!manlinks' ]; then
                        is_manlinks=1
                    else
                        break
                    fi
                elif manlinks_skip_line "$line"; then
                    continue
                elif [[ "$line" =~ ^[[:digit:]]+(\ +[[:digit:]]+)? ]]; then
                    # Encountering lui_list dimensions means file descriptive text is done
                    # Improvise descriptive info:
                    if [ -z "$title" ]; then
                        title="$file"
                    fi
                    break
                elif [ -z "$title" ]; then
                    title="$line"
                elif [ -z "$desc" ]; then
                    desc="$line"
                    break
                fi
            done< "$file"

            if [ -n "$title" ]; then
                fl_links+=( "$title" "$desc" "manlinks" "|$file" )
            fi
        fi
    done

    lui_list_init "$list_name"

    return 0
}

# Tool to see if a default file exists in the list.
#
# Args
#    (string):     name of file to seek
#    (string,in):  name of list of files to search
#
# Returns:
#    0 (success) if file name in list
#    1 (failuer) if file name not in list
find_file_in_list()
{
    local needle="$1"
    local -n haystack="$2"
    local OIFS="$IFS"
    local -i found=1   # error/not found

    lli_callback()
    {
        local IFS="|"
        local -a arr=( $5 )
        IFS="$OIFS"
        local path="${arr[@]: -1}"
        local name="${path##*/}"
        if [ "$name" == "$needle" ]; then
            found=0      # no error/found
            return 1
        fi
        return 0
    }

    lui_list_iterate "$2" lli_callback

    return $found
}

# Confirms that manlinks files exist in specificed directory.
#
# Args
#   (string):    path to search
#
# Returns
#   0 (true)    if any manlinks files found
#   1 (false)   if no manlinks files found
contains_manlinks_files()
{
    local cmf_path="$1"
    local -a cmf_list

    if identify_manlinks_files "cmf_list" "$cmf_path"; then
        if [ "${#cmf_list[@]}" -gt 0 ]; then
            return 0
        fi
    fi

    return 1
}

# Reads and open a **manlinks** file.
#
# Args
#    (string):   path to **manlinks** file
run_manlinks_file()
{
    local rmf_path="$1"
    local -a rmf_submenu
    local -a rmf_paras

    open_manlinks_file "rmf_submenu" "rmf_paras" "$1"

    local lpath="${rmf_path%/*}"
    if [ "$lpath" != "$rmf_path" ] && [ -d "$lpath" ]; then
        pushd "$lpath" >/dev/null
        if [ "$?" -ne 0 ]; then to_continue; fi
        manlinks_start_interaction "rmf_submenu" "rmf_paras"
        popd >/dev/null
        if [ "$?" -ne 0 ]; then to_continue; fi
    else
        manlinks_start_interaction "rmf_submenu" "rmf_paras"
    fi
}

# Opens default manlinks file in the directory hosting **manlinks** file.
#
# The default **manlinks** file will be named *home*, with or without a *mlnk*
# extension.  Files are identified as **manlinks** by a inoperative *shebang*,
# #!manlinks
#
# No Args
open_default_manlinks_file()
{
    local odmf_path="$1"

    local -a odmf_links=()
    local -i odmf_ndx=0

    local -i odmf_found=0

    # Get manlinks files in ultimate directory
    identify_manlinks_files "odmf_links" "$odmf_path"

    odmf_check()
    {
        local fpath="${5:1}"
        local fname="${fpath##*/}"
        local froot="${fname%.*}"

        if [ "$froot" == "home" ]; then
            odmf_found=1
            run_manlinks_file "$fpath"
            return 1
        fi

        (( ++odmf_ndx ))
        return 0
    }

    lui_list_iterate "odmf_links" odmf_check
    [ "$odmf_found" -eq 1 ]
}


# Display line function for manlinks
#
# Hilight the title part to set it off from the description.  This
# function is not meant to be a *lui_list_display_line* function, but
# rather to be called by one with the additional maximum title length
# parameter.
#
# Args
#    (integer):   flag (1 for true, 0 for false) if line is target
#    (integer):   width of characters to print
#    (string):    line title
#    (string):    line description
#    (integer):   max title length
manlinks_display_line()
{
   local -i hilite="$1"
   local -i padding="$2"
   local title="$3"
   local desc="$4"
   local -i title_padding="$5"

   # allowance for abandoning description after title
   local -i gutter=3

   # Prepare appropriate colors
   local col_title=$'\e[37;1m'
   # local col_title=$'\e[48;5;24m\e[37;1m'
   # local col_hilite=$'\e[48;5;25m'
   local col_hilite=$'\e[48;2;0;64;96m'
   local col_letter="$COL_LETTER_HI"
   if [ "$hilite" -ne 0 ]; then
       col_title="${col_title}${col_hilite}"
   fi

   # calculate title length before adding colors:
   local trimmed_title="${title/&/}"
   local -i len_title="${#trimmed_title}"

   massage_menu_name "title" "$col_letter" "$col_title"

   dupchar $(( title_padding - len_title )) ' '
   echo -n "$title${COL_OFF}"

   # print description if enough room
   local -i max_desc_len=$(( padding - gutter - title_padding ))
   if (( max_desc_len > 0 )); then
       echo -n ": "
       echo -n "${desc:0:$max_desc_len}"
   fi

   echo $'\e[m'
}

# Key action function invoked with item selection.
#
# Args
#    (string)      A character string representing the keypress that
#                  triggers this action
#    (name-in)     name of the current lui_list
#    (integer)     row number of the currently indicated lui_list row
#    (various...)  optional extra parameters passed to lui_list_generic()
#                  following the first five parameters.
#
# Returns 0 to continue the interaction
manlinks_execute_line()
{
    local keyp="$1"
    local list_name="$2"
    local -i row_ndx="$3"

    local -i list_ndx
    lui_list_ndx_from_row_cell_nameref "list_ndx" "$list_name" "$row_ndx" 2

    local -n mel_menu="$list_name"
    local cmd="${mel_menu[$list_ndx]}"
    local packed_args="${mel_menu[$((list_ndx+1))]}"

    local delimiter="${packed_args:0:1}"
    packed_args="${packed_args:1}"

    # Only change IFS until the array is initialized
    local -a args
    array_from_string "args" "$packed_args" "$delimiter"

    if [ "$cmd" == "manlinks" ]; then
        run_manlinks_file "${args[0]}"
        return "$?"
    else
        "$cmd" "${args[@]}"
    fi

    return 0;
}

# Packaged initialization of a lui_list_generic given a lui_list
# and an optional paragraphs array.
#
# Args
#    (name-out):  name of initialized manlinks lui_list from which
#                 the interaction will be built
#    (name-in):   optional name of an array bound paragraphs.
manlinks_start_interaction()
{
    local lui_list_name="$1"
    local paras_name="$2"

    local -a msi_letters=()
    auto_menu_get_letter_array "msi_letters" "$lui_list_name"
    local msi_keys_string msi_packed_keys
    concat_array "msi_keys_string" "msi_letters"
    concat_array "msi_packed_keys" "msi_letters" "|"

    local -i msi_selected=0

    local -i msi_item_padding=$( lui_list_max_len "$lui_list_name" )

    msi_display_line()
    {
        manlinks_display_line "$1" "$2" "$3" "$4" "$msi_item_padding"
    }

    msi_key_action()
    {
        local keyp="$1"
        local -i mka_line_ndx="$msi_selected"

        if progressive_letter_search "msi_selected" "$msi_keys_string" "$keyp"; then
            manlinks_execute_line "$keyp" "$lui_list_name" "$msi_selected"
            return "$?"
        fi
        return 0
    }

    msi_serialize()
    {
        local path="$PWD/generated.mlnk"
        echo "Now serializing to '$path', buddy"
        serialize "$lui_list_name" "$path"
        return 0
    }

    local -a msi_keys_list=(
        "${Man_Keys_List[@]}"
        "${msi_packed_keys}:msi_key_action:View topic"
        '^P:msi_serialize:Save list to .mlnk file'
    )

    local -a args=(
        "msi_selected"
        "$lui_list_name"
        0 0
        20 80         # limits of rows and columns
        "msi_display_line"
        "msi_keys_list"
        "$paras_name"
    )

    reset_screen
    lui_list_generic "${args[@]}"
    reset_screen
    echo
}


# Collect manfiles from invocation directory as well as the manlinks
# application directory.  This allows for project-specific manlinks files
# that won't be included outside of that project's directory.
show_manlinks_files()
{
    local -n smf_files="$1"

    local -a smf_paras
    bind_paragraphs "smf_paras" <<EOF
This is a list of available manlinks files.  Select one of these
files to see the links included in the file.
EOF

    # pushd "$AFOLDER" >/dev/null
    manlinks_start_interaction "smf_files" "smf_paras"
    # popd >/dev/null
}

show_usage()
{
    local B="$COL_BOLD"
    local I="$COL_ITAL"
    local O="$COL_OFF"

    local using_name="$1"
    cat <<EOF

Use ${B}manlinks${O} (${B}$using_name${O}) for a console-based, curated help resource.

${B}${using_name}${O} [${I}OPTION${O}] [${I}FILENAME${O}]

${B}OPTIONS${O}
   ${B}-h${O}  for this help page.
   ${B}-p${O}  for personal manlinks hosted in ${I}~/manlinks.d${O}.
   ${B}-l${O}  for manlinks in the current working directory.
   ${B}-m${O}  for manlinks files residing in the ${B}manlinks${O} application
       directory.  This is the default search directory, so this
       option can be omitted.
   ${B}-s${O}  force scan mode: ignore ${B}home.mlnk${O}, if found, to create a
       alphabetic-ordered generated list that serves as a start
       to work on a ${B}home.mlnk${O} file.

If a ${I}FILENAME${O} is provided, that file will be opened in the
current working directory.  If another path is specified with one
of the options above, that directory will be searched for ${I}FILENAME${O}.

EOF
    }

# Delegate for parsing arguments into three name-reffed variables
#
# Args
#    (name,out):           name of variable of path where manlinks should run
#    (name,out):           name of manlinks file to open
#    (name, integer, out): name of scan flag, to ignore home.mlnk if found
parse_args_for_path_and_file()
{
    local -i linkscount=0
    local using_name="${0##*/}"

    local -n pafpaf_path="$1"
    local -n pafpaf_file="$2"
    local -n pafpaf_scan="$3"
    shift 3

    pafpaf_scan=0

    local file path="${AFOLDER}/manlinks.d"

    local arg
    for arg in "$@"; do
        if [ "${arg:0:1}" == '-' ]; then
            case "$arg" in
                '-h')
                    show_usage "$using_name"
                    return 1
                    ;;
                '-m')
                    path="${AFOLDER}/manlinks.d"
                    ;;
                '-l')
                    if contains_manlinks_files "$PWD"; then
                        path="$PWD"
                    else
                        echo "Current directory contains no links." >&2
                        return 1
                    fi
                    ;;
                '-p')
                    if [ -d "${HOME}/manlinks.d" ]; then
                        if contains_manlinks_files "${HOME}/manlinks.d"; then
                            path="${HOME}/manlinks.d"
                        else
                            echo "Personal Manlinks files not found." >&2
                            return 1
                        fi
                    else
                        echo "Home-based links not found." >&2
                        return 1
                    fi
                    ;;
                '-s')
                    pafpaf_scan=1
                    ;;
            esac
        else
            file="$arg"
        fi
    done

    if [ -n "$file" ]; then
        if [ -z "$path" ]; then
            pafpaf_path="$PWD"
        fi
        if [ -e "${path}/$file" ]; then
            pafpaf_path="$path"
            pafpaf_file="${path}/$file"
        fi
    elif [ -z "$path" ]; then
        pafpaf_path="${AFOLDER}/manlinks.d"
    else
        pafpaf_path="$path"
    fi

    return 0
}

#########################
#         Main          #
# Execution begins here #
#########################

# @def Execution packed-array element
#
# Since lui_list_generic needs a fixed-width array table,
# the fourth field of each row will be a packed array
# of options to be passed to the command in the third field.
#
# Since the same IFS character may not be appropriate for
# all argument lists, the first character of the packed-array
# is the IFS character to use to split the array.
Man_Keys_List=(
    $'\e|q:LUI_ABORT:Up one level'
    $'\n:manlinks_execute_line:View topic'
)

debug_restore()
{
    read -n1 -p "Press any key"
    restore_console_state_show_cursor
}

# Setup for unexpected termination
save_console_state_hide_cursor
trap restore_console_state_show_cursor SIGINT
trap restore_console_state_show_cursor EXIT

ml_main()
{
    local mpath mfile
    local -i force_scan=0

    if parse_args_for_path_and_file "mpath" "mfile" "force_scan" "$@"; then

        reset_screen

        if [ -n "$mfile" ]; then
            run_manlinks_file "$mfile"
        elif [ -n "$mpath" ]; then
            local -a m_files
            identify_manlinks_files "m_files" "$mpath"

            if [ "${#m_files[@]}" -eq 0 ]; then
                echo "No manlinks files found in '$mpath'." >&2
                exit 1
            else
                pushd "$mpath" >/dev/null
                if [ "${#m_files[@]}" -eq 1 ]; then
                    run_manlinks_file "${m_files[0]}";
                elif [ "$force_scan" -eq 0 ] && find_file_in_list "home.mlnk" "m_files"; then
                    run_manlinks_file "home.mlnk"
                else
                    show_manlinks_files "m_files"
                fi
                popd >/dev/null
            fi

            # if ! open_default_manlinks_file "$mpath"; then
            #     identify_manlinks_files "links_list" "$AFOLDER"
            #     show_manlinks_files
            # fi
        fi

        reset_screen
    fi
}

ml_main "$@"
