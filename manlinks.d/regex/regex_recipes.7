.TH regex_recipes 7 "Miscellaneous Manual Page"
.SH NAME
.B regex_recipes
\- Documentation with examples: unexpected patterns that work
.SH DESCRIPTION
.PP
I hate to think about how many hours I've spent (wasted?) wrestling
with regular expressions.
I understand the regex syntax, most of my trouble comes from contention
for significant characters between the environment and the expression.
Solutions typically come from unintuitive quoting (single or double),
and escaping certain characters.
.PP
This document starts out as a place to save solutions to complicated
command line regular expressions.
Command line expressions are complicated by the need to escape certain
characters that have significance in the shell environment.
.SH SUGGESTION
.PP
For complicated expressions, I find it helpful to break it up
in an array that can be commented, concatenated and used.
.PP
For example, in a Bash script that needs to break out parts of a
.B man
page search string like
.IR printf(3) ,
the following code shows how to use an array:
.IP
.EX
declare -a re_parts=(
   '^'
   '('      # begin group 1
   '[^(]+'  # characters up until first open parenthesis
   ')'      # end of group 1

   '('      # begin group 2
   '\(rs('     # escaped parenthesis to match as character

   '('      # begin group 3
   '[^)]+'  # characters up until closing parenthesis
   ')'      # end of group 3

   '\(rs)'     # escape to match parenthesis character
   ')'      # end of group 2

   '?'      # group 2 is optional
)

# IFS Save, change to empty for concatenating, then restore
declare OIFS="$IFS"
declare IFS=''
local re_concat="${re_parts[*]}"
IFS="$OIFS"

# Equivalent expressions.
declare re2_quoted='^([^(]+)(\(rs(([^)]+)\(rs))?'
declare re_unquoted=^\(rs([^\(rs(]+\(rs)\(rs(\(rs\(rs\(rs(\(rs([^\(rs)]+\(rs)\(rs\(rs\(rs)(rs\)?
.EE
.TP
.B Escaping Notes
.RS 7
.TP 3
1
In Bash, to match a parenthesis character, the character must be escaped
in the expression with a backslash (\(lq\(rs(\(rq).
.TP 3
2
Variable
.BR re_unquoted ,
without protection from quote-enclosure, many characters require escaping.
All parentheses must be escaped to prevent Bash interpretation, and the escaped
parentheses use to match parentheses characters must have an escaped backslash
before the escaped parenthesis (\(lq\(rs\(rs\(rs(\(rq).


.RE


.SH RECIPES
.SS Grouping
.PP
There are many circumstances that require treating multiple strings
as equal.
For example, finding
.B man page
headings may want to list all
.BR TH ", " SH ", and " SS
requests.
.PP
I won't show everything that failed, there were many failures.
Here is a successful expression:
.IP
.EX
zgrep \(aq^\(rs.\(rs(TH\(rs\(baSH\(rs\(baSS\(rs)\(aq /usr/share/man/man1/grep.1.gz
.EE
.PP
.BR Grep " and " zgrep
use Posix-flavored regular expressions (see
.BR regex (7)).
The parentheses
.RB (' ( '\ and\ ' ) ')
and bar
.RB (' \(ba ')
must be escaped to be treated as grouping and equivalence regex characters.
The dot
.RB (' \. ')
must be escaped to
.I prevent
it from being treated as a meta character (ie wildcard).
In this case, the whole expression must be enclosed in quotes to work.
