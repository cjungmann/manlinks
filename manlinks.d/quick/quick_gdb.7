.TH quick_gdb 7 "Miscellaneous Manual"
.SH NAME
.B quick_gdb
\- Initially-limited cheat sheet for using GDB (Gnu Debugger)
.SH DESCRIPTION
.PP
This manual is a compilation of hints to help me remember useful
options and methods to help me be more productive using the
.B GDB
tool.
.SH SAVING VALUES
.PP
.B GDB
allows a user to create arbitrary variables for saving values.
The ad-hoc variable name should start with a dollar-sign (\(Do):
.IP
.EX
(gdb) set $saved = &mystruct->member
.EE
.SH LOGGING OUTPUT
.PP
The GDB command window handles commands
.B and
program output, and while commands can be revisited, output text that
scrolls up cannot be retrieved.
.PP
.B Initiate logging
and view the logged output using
.B tail
in a separate window.
The following URL includes an explanation (I hadn't used it yet at
the time of writing):
.PP
.UR https://stackoverflow.com/questions/9257085/
.UE
.SH SETTING BREAKPOINTS
.PP
IMHO, Breakpoints are the most important feature of a debugger.
Other very important features, like stepping through code and
inspecting variables, depend on being able to stop execution at
critical points.
.SS Breakpoints While Running GDB
.TP
.BI break " 1234"
Pause execution at line number
.I 1234
of the currently executing source code file.
.TP
.BI break " screen.c:1234"
Pause execution at line
.I 1234
of source file
.IR screen.c .
.TP
.BI break " special_key_str"
Pause execution when function
.I special_key_str
has been called.
.TP
.BI break " screen.c:1234 " if " errno!=0"
Conditionally pause at line. In this case, break when
.B errno
indicates an error.
.TP
.BI break " screen.c:1234 " "if $_streq(" x ", " \(dqhello\(dq )
Break when value matches a string value.
Use special gdb function
.BR $_streq .
.SS Breakpoints on the Command Line
.PP
If you know the function name or line number of the point where you
want to pause execution, enter it with a command line option when
invoking
.BR GBD .
.TP
.BR "gdb --tui --args -ex " "\(dqbreak screen.c:938\(dq"
.TQ
.BR "gdb --tui --args -ex " "\(dqbreak special_key_str\(dq"
.SS Watchpoints
.PP
A watchpoint is a breakpoint that is triggered by reading or writing
a variable.
A watchpoint can also be set for when a memory location changes.
.PP
The following example sets a break when the value of a data member
is changed.
The local name of the data may go out of scope, so in this example,
the address of the data member is saved and then used when defining
the watchpoint.
.IP
.EX
(gdb) set $addr = &(*(ARRAY*)svar->value)->num_elements
(gdb) watch *(char*)$addr
.EE
.SH STUDY \(dqDATA\(dq SECTION OF INFO GDB
.PP
There is too much in this
.B info gdb
section to cover here.
In the main page of the
.B data
section is a treatment of the
.B print
command with its command line options.
Further down is the
.B explore
function, which merits consideration.
.PP
Under the main
.B data
section are many subsections, of particular merit are the
sections on
.BR "memory tagging" ", " "convenience vars" ", and " "convenience funs" .

