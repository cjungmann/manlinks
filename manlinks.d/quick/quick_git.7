.TH quick_git 7 "Miscellaneous Manual Page"
.ds git \fBGit\fP
.SH NAME
.B quick_git
\- Cheat sheet for essential \*[git] commands
.SH DESCRIPTION
.PP
The following list of commands can help with effective \*[git] usage.
.SH COMMANDS
.TS
tab(|);
lB s
l lx .
Git-initialize a directory
_
T{
.B git init
T}|Confgure directory to use \*[git].

.T&
lB s
l lx.
Information Commands
_
T{
.B git status
T}|Show untracked and uncommitted files, among other things.
T{
.B git status -u
.I no
T}|Status report but excluding untracked files
T{
.B git status --
.I .
T}|T{
Status report for directory
.B .
only.
The
.I .
is a
.B pathspec
which is described in
.BR gitglossary (7).
T}
T{
.B git diff
.RI [ file ]
T}|T{
Show changes between old and current versions.  Only for
.IR file ,
if specified, otherwise all changes in repository.
T}
T{
.B git config --global --edit
T}|T{
Replace
.B --global
with other domains to use an editor to set or change values.
T}

.T&
lB s
l lx.
Retrieval Commands
_
T{
.BI "git clone " URL
T}|T{
Download \*[git] repository from
.IR URL .
T}
T{
.BI "git fetch " repo
T}|T{
Update local repository with changes from
.IR repo ,
which can be a repository or a refspec.
T}
T{
.BI "git pull " repo
T}|T{
Runs
.BR "git fetch" ", then either " "git rebase " or " git merge"
to reconcile differences.
T}

.T&
lB s
l lx.
Saving Commands
_
T{
.B git add
T}|T{
Stage all untracked and changed files to be committed.
T}
T{
.BI "git add " filename
T}|T{
Stage
.I filename
to be commited.
T}
T{
.B git add -u
T}|T{
Stage only files that were updated and previously committed.
T}
T{
.B git commit
.RI [ file ]
T}|T{
Commit to the local repository
.I file
(if specified) or all staged files.
T}
T{
.BI "git push " repo
T}|T{
Update remote
.I repo
with the committed changes of the local repository.
T}

.T&
lB s
l lx.
Recovery Commands
_
T{
.B git checkout
.I file
T}|T{
Replace current contents of
.I file
with the most recently committed contents of that file.
T}
T{
.B git checkout
.I branch
T}|T{
Replace project's content with content from branch
.IR branch ,
adding, replacing, and deleting files as needed.
T}
T{
.BI "git reset HEAD " file
T}|T{
Unstage
.I file
so it won't be committed with
.B git commit
called.
T}
T{
.B git reset HEAD~
T}|T{
Undo the last commit.
T}
T{
.B git stash
T}|Save uncommited changes.
T{
.B git stash pop
T}|Restore stashed changes.

.T&
lB s
l lx.
Branches
_
T{
.B git branch
T}|List branches in the current repository.
T{
.BI "git checkout -b " new_branch
T}|T{
Create new branch,
.IR new_branch .
T}
T{
.BI "git checkout " branch
T}|T{
Switch to existing branch,
.IR branch .
T}
T{
.BI "git merge " branch
T}|T{
Merge branch
.I branch
into the current branch.
T}
T{
.BI "git branch -d " branch_name
T}|T{
Delete branch
.I branch_name
from the repository
T}

.T&
lB s
l lx.
Tagging Progress
_
T{
.BI "git tag " v0.1
T}|T{
Create a lightweight tag,
.IR v0.1 ,
in the current repository.
T}
T{
.nf
.BI "git tag -a " v0.2 " -m " \(dqdescription\(dq
.fi
T}|T{
Create an annotated tag,
.IR v0.2 ,
and assign a string represented by
.I description
to the tag.
T}
T{
.B git tag -l
T}|List tags on current repository.
T{
.B git tag -l -n
T}|List tags with messages.
T{
.B git show
.I v0.2
T}|T{
Show tag
.I v0.2
with message and details
T}

.T&
lB s
l lx.
File Management
_
T{
.BI "git rm " file
T}|T{
Remove file
.I file
from repository.
T}
T{
.B git mv
.I source destination
T}|T{
.RI Move " source " to " destination" .
T}
T{
.B git ls-files
T}|List repository files.
.TE
.SH ATTACH TO REMOTE REPOSITORY
.PP
After creating a repository on your remote \*[git] host, use the following
commands to upload your project to the remote repository.  Change
.IR remote_name ", " branch_name ", and " git@github.com:username/project.git
to appropriate names in your domain.
.PP
Common replacements for
.IR remote_name " and " branch_name " are " origin " and " main .
.IP
.EX
.BI "git remote add " remote_name " " git@github.com:username/project.git
.BI "git branch -M " branch_name
.BI "git push -u " "remote_name branch_name"
.EE
.PP
The following command may be necessary in some cases.
If it is necessary, \*[git] will prompt you with the necessary command:
.IP
.EX
.BI "git push --set-upstream " "remote_name branch_name"
.EE
.PP
If you get a message saing that
.I your current branch is behind its remote counterpart
when first invoke
.B git push
because of some already existing remote files (like LICENSE or README.md),
you will need to
.B pull
those files down before you can
.B push
your project to the new repository.
.PP
Assuming the
.B git remote add
and the
.B git branch
commands were successful, that the remote name is
.IR origin ,
the branch name is
.IR main ,
and the upstream file that must be pulled is
.IR LICENSE ,
invoke the following commands:
.IP
.EX
.BI "git fetch " origin
.B git checkout \c
.IR origin / "main LICENSE"
.BI "git add " LICENSE
.BI "git commit " LICENSE " -m " \c
.RI \(dq "pulled commit" \(dq
.BI "git push " origin
.EE
.SH GIT MAN PAGES
.PP
One calls a \*[git] function by entering the command
.BR git ,
followed by the specific \*[git] command needed.
The \*[git] command format used to access the \*[git] man pages
is
.B git-
.IR command ,
where
.I command
is the \*[git] command name.
For example, learn about the \*[git]
.B commit
command by typing:
.IP
.EX
.BI "man " git-commit
.EE
.PP
Also consider browsing
.BR giteveryday (7)
for an overview of \*[git] usage.
