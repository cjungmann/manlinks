.TH groff_quick 7 "Miscellaneous Information Manual"
.de UNI
.   fam C
.   nop \\$1\\c
.   fam
.   shift
.   if \\n[.$]>0 .nop \\$1
..
.SH NAME
.B quick_groff
\- Quick guide to groff programming features
.\"""""""""""
.SH DESCRIPTION
.PP
.B groff
is a very old text processing program and language that uses two-letter
names for most builtin macros, making it difficult to master.
Furthermore the official documentation does not categorize objects
to make it easier to navigate.
This document attempts to address these issues by providing an
easy-to-access reference with categories and more accessible.
.SH BASIC STUFF
.SS TH Manpage Header
.PP
I always get this wrong.  Consider these:
.IP
.EX
\&.TH \(dqtitle\(dq \(dqsection\(dq [footer-middle] [footer-outside] [header-middle]
\&.TH \(dqgroff_quick\(dq \(dq7\(dq \(dqMiscellaneous Manual\(dq
\&.TH \(dqgroff_quick\(dq \(dq7\(dq \(dq2023-07-01\(dq \(dq\(dq \(dqMiscellaneous Manual\(dq
.EE
.SS REGISTERS
.PP
Very basic start, consult
.BR groff (7)
for more.
.PP
.RS 4
Setting registers:
.RS 4
.EX
\&.nr myreg 1          \(rs\(dq set (integer) register \(lqmyreg\(rq to \fI1\fP.
\&.ds mystring \(dqbogus\(dq \(rs\(dq set string \(lqmystring\(rq to \fIbogus\fP.
.EE
.RE

Reading registers:
.RS 4
.EX
The value of myreg is \(rsn[myreg].
The value of mystring is \(rs*[mystring]
.EE
.RE
.RE
.SS CONDITIONALS
.PP
The requests
.BR .if ", " .ie ", " .el ", and " .while
introduce conditional statements.
.RS 4
A single line conditional can include a dot-prefixed request:
.RS 4
.EX
\&.if ( \(rsn[myreg] == 1 ) .nop myreg is 1
.EE
.RE
A multi-line conditional uses curly-braces to enclose result:
.RS 4
.EX
\&.if '\(rs*[value]'bogus' \(rs{ \(rs
\&.  nop mystring is \fB\(rs(dq\fPbogus\fB\(rs(dq\fP
\&.\(rs}
.EE
.RE
Multiple \.ie requests must be enclosed in \.el requests:
.RS 4
.EX
\&.ie '\(rs*[value]'bogus' .nop bogus
\&.el \(rs{ \(rs
\&.  ie '\(rs[value]'ersatz' .nop ersatz
\&.  el .nop neither bogus or ersatz
\&.\(rs}
.EE
.RE
.RE
.PP
Detecting the first letter of a string can be derailed if the input
might be a backslash.
When comparing the potential backslash character, add another
character to prevent the backslash from disrupting the comparison
delimiters.
For the extra character, some characters work, some don't.
In this example, I'm using a dot to detect the backslash.
.PP
.RS 4
.EX
\&.\(rs\(dq first isolate the first character
\&.ds first_char \(Do1
\&.substring first_char 0 0
\&.\(rs\(dq
\&.ie '\(rs\(rs*[first_char].'\(rs.' .nop backslash
\&.el \(rs{ \(rs
\&.   ie '\(rs\(rs*[first_char]'-' .nop dash
\&.   el .nop neither backslash or dash
\&.\(rs}
.EE
.RE
.PP
Refer to
.BR groff(7),
search for
.IR ^CONDITIONS .
.SH USING SPECIAL CHARACTERS
.PP
Generally, just typing a character is enough to include it in a text.
However, there are many untypeable characters that must sometimes be
included in a text.
There are several ways to do this.
.TP
.B Invoke Character by Name
Besides directly typing a character, this is the easiest way to insert a
character into the output stream.
Invoke a character name following a backslash with the appropriate
subscripting,
.B \(rs(aa
for two letter names,
.B \(rs[name]
for a name of any length.
.IP
For example, enter a double quote with
.RB \(lq \(rs(dq \(rq.
.TP
.B Invoke Unicode Character
For special characters not found in the previous resources, the explicit
unicode value can be used to generate the character.
For example, the vertical ellipsis character is generated with
.UNI \(rs[u22EE]  \N'46'
Take care to use capital letters for the hexadecimal letters.
.TP
.B Typeset With Indexed Glyph
Use the character escape sequence \(rsN'n' to insert an uninterpreted
glyph in the output stream.
Generate a period glyph with the
.UNI \(rsN'46'
escape sequence.
.char \[period] \N'46'
.TP
.B Name a Character
Once a character unicode or index code is found, give it a name to make
it easier to use.
Let's name the vertical ellipsis and period characters.
.IP
.EX
\[period]char \(rs[vellip] \(rs[u22EE]
\[period]char \(rs[period] \(rsN\(aq46\(aq
.EE
.IP
Thereafter, we can generate a vertical ellipsis by entering \(rs[vellip] or
a period with \(rs[period] .
.RE
.SS Finding Special Characters
.TP
.B Search groff(7)
This general reference includes a short list of frequently-used
special characters (search with regular expression
.nf
.IR "^\(rs\ +Special Characters" ,
.fi
noting the escaped space before the \(aq+\(aq)
.TP
.B Search groff_char(7)
This is the reference for
.B groff
characters.
Look here first when trying to figure out how to include a specific character.
This resource includes unicode and index values for many of the characters.
.SH USING URLS
.PP
URL links are convenient resources to include in a man page.
To be recognized as a URL, it must include the
.B http://
prefix.
.PP
Many URLs are too long to fit on one rendered man page line.
Enclose the
.BR .UR - .UE
request block in a
.BR .nf - .fi
no fill or format request block.
This will cause the long link to wrap rather than break to a
new line, preserving the integrity of the URL.
.PP
.EX
\&.nf
\&.UR https://opensource.com/sites/default/files/gated-content/cheat_sheet_groff_v2.pdf
OpenSource Groff Cheat Sheet
\&.UE
\&.fi
.EE
.SH READING LENGTHS
.PP
There are many things to measure in a give document, string character
length, string printed length.
.TS
tab(|);
l lx .
.\"
.\"
T{
.BI \(rsw' string ' 
T}|T{
Returns length of
.I string
in basic device units.
T}

T{
.RB \(rsn( st " or \(rsn[" rst ]
T}|T{
After
.BR \(rsw ,
string size above baseline
T}

T{
.RB \(rsn( sb " or \(rsn[" rsb]
T}|T{
After
.BR \(rsw ,
string size below baseline
T}

T{
.RB \(rsn[ .n ]
T}|T{
Length of text in previous line (device units).  You may need
.B .br
to terminate the previous line.
T}

T{
.RB \(rsn[ .k ]
T}|T{
current horizontal position, relative to indentation
T}
.T&
cB s
l l.
Character count only
T{
.B .length
.I name value
T}|T{
Save length of
.IR value ,
in characters, to the register named
.IR name .
T}
.TE


.br
this is some text \n[.l]
.br
The previous line was \n[.n]
.br
this is longer string of text \n[.ll]
.br
The previous line was \n[.n]
.br
.in 16
.br
this is some text \n[.l]
.br
The previous line was \n[.n]
.br
.in
Let's underline some text, using \(rs[.k].
.br
Underline
this text
.nr len \n[.k]
\Z'\D'l -\n[len]u 0'
(\n[len])
What do ya think?
.br
Let's underline some text using \(rsw'\fIanything\fP:
This is a line with
.nr len \w'some text'

\Z'\D'l \n[len]u 0''
some text.  The length of \(lqsome text\(rq is \n[len].
.SH MISCELLANEOUS SMALL TOPICS
.SS UNEXPECTED SPACING
.PP
Each input line (request or text) adds a space after the input
line is added to the output line.
.PP
Add a backslash (\fB\(rs\fP) or a backslash-c (\fB\(rsc\fP) at
the end of the input line to skip the trailing space.
.SS DRAWING LINES
.PP
There are two methods of drawing lines.  One uses a string of glyphs,
the other uses a drawing escape sequence.
.TS
tab(|);
l lx .
\(rsl'\fIN\fP\fBc\fP'|horizontal line, \fIN\fP length, optionally using \fBc\fP glyph.
\(rsL'\fIN\fP\fBc\fP'|vertical line, \fIN\fP length, optionally using \fBc\fP glyph.
\(rsh'\fIdist\fP'|Without drawing, move \fIdist\fP horizontally.
\(rsv'\fIdist\fP'|Without drawing, move \fIdist\fP vertically.
\(rsD'l \fIhlen\fP \fIvlen\fP'|draw line to \fIhlen\fP, \fIvlen\fP.
\(rsD't \fIthickness\fP'|Set line-drawing thickness to \fIthickness\fP.
.TE
.PP
To color
.B \(rsD
lines, use the
.BI \(rsm[ color ]
escape sequence.
.PP
For more information about using
.BR \(rsD ,
see
.br
info groff -n\(dqDrawing Requests\(dq
.SS FORMATTING FOR VERTICAL ALIGNMENT
.PP
I use this to align arguments of a function.
I prefer to use the Roman font for punctuation, this is
reflected in the instructions and example.
.TS
tab(|);
l l
.
T{
Output just past opening parenthesis.
T}|T{
\&.BR \(dqint foo\(dq \(dq (\(dq
T}
_
T{
Save the horizontal position to which following lines will be aligned.
.BI \(rsn[ .k ]
T}|T{
\&.nr valign \(rsn[.k]
T}
_
T{
Increase indentation by measured size in basic output device units.
T}|T{
\&.in +\(rsn[valign]u
T}
_
T{
Back-off one vertical space (line) to move the first parameter
back up with the opening parentheis.
T}|T{
\&.sp -1
T}
_
Add the parameters|T{
\(rsfBint\(rsfP \(rsfIarg1\(rsfP,
.br
\&.br
.br
\(rsfBint\(rsfP \(rsfIarg2\(rsfP,
.br
\&.br
.br
T}
_
T{
For final parameter, replace the comma with a close parenthesis
and semi-colon.
T}|T{
\(rsfBint\(rsfP \(rsfIarg3\(rsfP);
.br
\&.br
T}
_
Restore previous indentation level|\&.in
_
.TE
.PP
.BR "int foo" " (" \c
.nr halign \n[.k]
.in +\n[halign]u
.sp -1
\fBint\fP \fIarg1\fP,
.br
\fBint\fP \fIarg2\fP,
.br
\fBint\fP \fIarg3\fP);
.in

.SS DEBUGGING
.PP
There are several requests that write data to
.BR stderr ,
which makes it easy to read status without disturbing the output.
The following is a list of useful requests (remember, all of the
requests write to
.BR stderr ):
.TS
tab(|);
lb l x.
T{
\&.tm
.I anything
T}|print \fIanything\fP
T{
\&.tm1
.I anything
T}|print \fIanything\fP, including leading whitespace in quoted text
T{
\&.tmc
.I anything
T}|T{
print \fIanything\fP without trailing newline, including leading whitespace in quoted text
T}
\&.pnr|print all currently-defined number registers
\&.pev|print current environment state
\&.ptr|print name and positions of all traps
\&.backtrace|print backtrace of input
.TE
.TP
.B Suggestion for reading stderr:
View the
.B groff
document using
.B groffer
without the
.B --tty
argument.
The output will be to a PDF file, and the
.B stderr
output will be visible on the terminal, including very helpful
error messages.
.SH LEFT-JUSTIFIED TEXT
.PP
To prevent extra spaces being applied to fill an output line,
set
.B groff
into left-justified mode with the
.B .ad
mode.
.IP
.EX
\&.nr ojust \(rsn[.j]      \(rs\(dq save current adjust mode
\&.ad l                 \(rs\(dq 'l' for left-justified
Output your content
\&.ad \(rsn[ojust]         \(rs\(dq restore previous adjust mode
.EE
.SH NO-BREAK SECTION
.PP
Several requests are needed to toggle a no-break mode.
.IP
.EX
\&.nr ohyph \(rsn[.hy]      \(rs\(dq save hyphenation value
\&.nr ofill \(rsn[.u]       \(rs\(dq save fill mode status
\&.nf                    \(rs\(dq no-fill request
\&.nh                    \(rs\(dq turn-off hyphenation
Output your stuff
\&.hy \(rsn[ohyph]          \(rs\(dq restore hyphenation
\&.if \(rsn[ofill] .fi      \(rs\(dq restore fill mode if on previously
\&.rr ohyph              \(rs\(dq remove \fIohyph\fP register
.EE
.SH SEE ALSO
.PP
This guide is meant to help you over the tricky stuff.
There are several offline references that document important details:
.TS
tab(|);
l lx .
T{
.BR groff_man (7)
T}|man-page authoring macros
T{
.BR groff (7)
T}|the daily-use reference
T{
.BR groff_char (7)
T}|comprehensive reference to glyph codes
T{
.BR tbl (1)
T}|table-building preprocessor usage
T{
.BR groff_tmac (5)
T}|list of commonly-available groff macros packages
T{
.BR groffer (1)
T}|wrapper program for outputing groff content
T{
.BR groff (1)
T}|particuarly helpful as guide to other references
T{
.BR man-pages (7)
T}|Copious man-page authoring conventions
T{
.B info groff
T}|gold standard reference, last resort
.TE
