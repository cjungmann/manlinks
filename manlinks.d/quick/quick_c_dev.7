.\" -*- mode: nroff -*-
.TH quick_c_dev 7 "Miscellaneous Manual Page"
.SH NAME
.B quick_c_dev
\- Cheat sheet for C development with GCC
.SH DESCRIPTION
.PP
This personal cheatsheet targets GCC on Linux, because that's what I am
currently using.  I apologize to thexc multitudes reading this who are
working in a different environment.
.SH OFFLINE REFERENCE
.PP
You can find an off-line C language reference with:
.br
.B "   info"
.IR gnu-c-manual .
.SH EMACS LOCAL VARIABLES
.PP
This was not obvious, but for Emacs
.B Local Variables
blocks, a multi-line
.B compile-command
value can extend over multiple lines.
.IP
.EX
.\" escape 'L' of Local Variables to disable Emacs warning:
\(sl* \[char76]ocal Variables:                  *\(sl
\(sl* compile-command: \(dqgcc            \(rs*\(sl
\(sl*   -std=c99 -Wall -Werror -ggdb   \(rs*\(sl
\(sl*   -fsanitize=address             \(rs*\(sl
\(sl*   -o test test.c\(dq                 *\(sl
\(sl* End:                              *\(sl
.EE
.PP
Use backslash to continue a quoted string over multiple lines.
.B GCC
cannot handle multi-line comments, so we need to use the old-style
comments (\(sl* *\(sl).
The close comment must immediately follow a line-continuation
backslash.
.SH MEMORY CHECKING
.PP
.B Valgrind
is the old standard, and it doesn't work as well with more recent
version of
.BR GCC .
Compile the project with
.B sanitize
instead.
.B Sanitize
is faster and more convenient than
.BR Valgrind .
Running the executable with
.B sanitize
enabled generates a memory report if there are any memory errors.

.PP
The option is
.BR -fsanitize = \c
.IR address ,
and it should be used for both
.BR CFLAGS " and " LDFLAGS
variables in a Makefile.
.PP
If using
.B GCC
to compile and link, only one instance of the option is necessary.

