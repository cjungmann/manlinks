.\" -*- mode: nroff -*-
.TH quick_c_dev 7 "Miscellaneous Manual Page"
.\" 
.char \[vellip] \[u22EE]   \" vertical ellipses
.\"
.SH NAME
.B quick_c_dev
\- Cheat sheet for C development with GCC
.SH DESCRIPTION
.PP
This personal cheatsheet targets GCC on Linux, because that's what I am
currently using.  I apologize to thexc multitudes reading this who are
working in a different environment.
.SH OFFLINE REFERENCE
.PP
You can find an off-line C language reference with:
.br
.B "   info"
.IR gnu-c-manual .
.SH MISCELLANEOUS CODING REMINDERS
.PP
I often forget subtle but rarely used code techinques.
This section will serve as a set of notes to help me remember.
.SS Printing an Unterminated String
.PP
This is simple, but not obvious.
You can find this documented in
.BR printf (3)
under the heading
.IR "Format of the format string" .
.PP
In addition to
.I %d
consuming an argument,
.B printf
will consume an argument to replace any
.I *
(asterisk)
in the format string
For example,
.IP
.EX
char value[] = "Concerto"
int plen = strlen(value);
printf("%.*s", plen, value);
.EE
.PP
Given the format string,
.IR \(dq%.*s\(dq ,
the asterisk will be replaced by the value of
.BR plen " (8)"
to create the effective format string
.IR \(dq%.8s\(dq
.SS Function Pointers
.PP
A function is an address.  To use a function pointer, you need to describe its
return and argument types.
.PP
The function declaration
.IP
.EX
int my_function(int code, char* string) {
   \[vellip]
}
.EE
.\"
.TP
.B Function pointer variable
.EX
int(*fptr)(int,char*) = my_function;       // instantiate
int result =(*fptr)(1,"Chuck");            // invoke
.EE
.\"
.TP
.B Typedef of function pointer
.EX
typedef int(*fptr_type)(int,char*);        // declare
fptr_type fptr = my_function;              // instantiate
int result = (*fptr)(2,"Jess");            // invoke
.EE
.\"
.TP
.B Array of function pointers
.EX
int(*fptr_arr[])(int,char*) = { my_function1, alt1, alt2 };
                                           // instantiate
int result = (*fptr_arr[0])(3,"Rachel");   // invoke
.EE
.SS Use String Length for Struct Definition
.PP
This is a trick question.
You can't initialize a
.B const static int
or an struct array data member with
.BR strlen .
Instead of making a
.B const char[]
variable, 
.B #define
the string, then use
.B sizeof
to calculate string lengths or struct array member sizes:
.IP
.EX
#define AHEAD_ID \(dqATE_HANDLE\(dq

// sizeof(AHEAD_ID) includes terminating \(aq\(rs0\(aq
// strlen equivalent is size of define less the \(aq\(rs0\(aq
static const int head_len = sizeof(AHEAD_ID)-1;

// for a struct member, you probably want the \(aq\(rs0\(aq:
struct ahead {
   const char typeid[sizeof(AHEAD_ID)];
   \[vellip]
};
.EE

.SH MEMORY CHECKING
.PP
.B Valgrind
is the old standard, and it doesn't work as well with more recent
version of
.BR GCC .
Compile the project with
.B sanitize
instead.
.B Sanitize
is faster and more convenient than
.BR Valgrind .
Running the executable with
.B sanitize
enabled generates a memory report if there are any memory errors.

.PP
The option is
.BR -fsanitize = \c
.IR address ,
and it should be used for both
.BR CFLAGS " and " LDFLAGS
variables in a Makefile.
.PP
If using
.B GCC
to compile and link, only one instance of the option is necessary.
.SH VARIABLE NUMBER OF ARGUMENTS
.PP
This is a quick fundamental demonstration of using **va_args**.
.SS Clarifications
.TP 4
.B va_start
takes the last named argument as the second argument.
.TP 4
.B va_arg()
returns the first argument
.B after
the argument used in
.B va_start()
to initialize the
.BR va_list .
.TP 4
.B va_end()
must be called before the function terminates.
.SS Simple Example:
.PP
.EX
#include <stdarg.h>
#include <stdio.h>

// Function for first argument of function \fBcollect_reports\fP in main().
void report(int val) { printf("Received a %d.\n", val); }

void collect_reports(void(*reporter)(int), ...)
{
   \fBva_list\fP list_ints;
   \fBva_start\fP(list_ints, reporter);

   int ival;
   while ((ival = \fBva_arg\fP(list_ints, int)))
      (*reporter)(ival);

   \fBva_end\fP(list_ints);
}

int main(int argc, const char **argv)
{
   collect_reports(report, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0);
   return 0;
}
.EE

.SH TEMPORARYILY DISABLE WARNING
.PP
Compiler warnings are a powerful tool for ensuring good coding practice.
However, sometimes valid code may lead to an unwanted warning.
Case in point, sometimes an appropriately designed
.I unused
variable will generate a warning.
For a one-time disabling of the warning, use the
.B \(ul\(ulattribute\(ul\(ul
decoration.
This notifies both the compiler and anyone reading the code that the
behavior being coded is intentional.
.PP
Here are two examples:
.SS UNUSED VARIABLE
.PP
For situations where a variable is conditionally set but is only
used indirectly, the compiler will warn of an unused variable.
.IP
.EX
__attribute__((unused)) const char *name = NULL;
switch(action)
{
   case 'n':
      name = list_optarg;
      break;
}
.EE
.SS FALLTHROUGH
.PP
Generally, forgetting to
.B break
after a
.B case
is an error, so the compiler may warn against it.
For times where omitting the
.B break
command is intentional, use
.BR \(ul\(ulattribute\(ul\(ul ((fallthrough)):
.IP
.EX
int apress = 0;
switch(action)
{
   case 'a':
      apress = 1;
      __attribute__(fallthrough));
   case 'b':
      execute_option();
      break;
}
.EE

.SH EMACS LOCAL VARIABLES
.PP
This was not obvious, but for Emacs
.B Local Variables
blocks, a multi-line
.B compile-command
value can extend over multiple lines.
.IP
.EX
.\" escape 'L' of Local Variables to disable Emacs warning:
\(sl* \[char76]ocal Variables:                  *\(sl
\(sl* compile-command: \(dqgcc            \(rs*\(sl
\(sl*   -std=c99 -Wall -Werror -ggdb   \(rs*\(sl
\(sl*   -fsanitize=address             \(rs*\(sl
\(sl*   -o test test.c\(dq                 *\(sl
\(sl* End:                              *\(sl
.EE
.PP
Use backslash to continue a quoted string over multiple lines.
.B GCC
cannot handle multi-line comments, so we need to use the old-style
comments (\(sl* *\(sl).
The close comment must immediately follow a line-continuation
backslash.
