.TH bash_script 7 "Miscellaneous Information Manual"
.SH NAME
.B bash_script
\- Bash scripting cheat sheet
.SH DESCRIPTION
.PP
This is not (yet) an organized cheat sheet.
For now, it is simply a place where I can save simple scripting
techniques that I don't use frequently enough to memorize.
.SH STRING MANIPULATIONS
.TS
tab(|);
l lx.
T{
Grab file name from path
T}|T{
.nf
declare path="/usr/share/man/man1/grep.1.gz"
declare file="${path##*/}" # trim longest prefix ending in \(lq/\(rq
declare root="${file%%.*}" # trim longest suffix beginning with \(lq.\(rq
.fi
T}
.TE
.SH READ BUILTIN SPECIAL CASES
.PP
Special case hints to get you started.
.SS READ ALTERNATE SOURCES OF DATA
.PP
The
.B read
command reads from
.IR stdin .
Besides simply reading
.IR stdin ,
there are three other ways to provide
.I stdin
data:
.TS
tab(|);
lb lb
l l.
source|code
from a file|T{
.EX
while read -r; do
   use_reply \(dq$REPLY\(dq;
done < \(dq$filename\(dq
.EE
T}

from a string|T{
.EX
while read -r; do
   use_reply \(dq$REPLY\(dq;
done <<< \(dq$string\(dq
.EE
T}

T{
from process output
.br
AKA
.RI \(dq "process substitution" \(dq
T}|T{
.EX
while read -r; do
   use_reply \(dq$REPLY\(dq;
done < <( awk -f script.awk ~/data.dat )
.EE
T}
.TE
.SS READ PERFORMANCE HINTS
.TP
.B Preserving spaces
By default,
.B read
respects the
.B IFS
value.
That means that
.B read
will discard leading and trailing spaces, and will compress consecutive
internal spaces into a single space.
.IP
To preserve spaces, set
.B IFS
to an empty string.
.TP
.B Avoid subshells
Avoid having the
.B read
command operate within a subshell.
If that happens, the variables in which the contents were
read will be inaccessible because they will have been discarded
when the subshell ends.
Don't forget that piping output creates subshells.
.IP
Construct your
.B read
like this:
.RS 12
.EX
while read -r; do
   USE \(dq&REPLY\(dq
done < <( awk -f script /etc/passwd )
.EE
.RE
.IP
Don't do this:
.RS 12
.EX
awk -f script /etc/passwd | while read -r; do
   use \(dq$REPLY\(dq
done
.EE
.RE
.PP
.SH RANDOM QUICK SOLUTIONS
.PP
Some things are easy to do, if you know what to do.
.SS Heredoc to String
.PP
Create a mulitline string variable with a
.BR heredoc .
.IP
.EX
declare NLString
read -r -d'' "NLString" << EOF
abcdefghij
0123456789
EOF
.EE
.PP
The heredoc will ignore any single leading TABs from the lines
when using
.IR <<- " instead of " << .
.IP
.EX
declare NLString
read -r -d'' "NLString" <<- EOF
   abcdefghij
   0123456789
EOF
.EE
.PP
The termination string will be recognized with or without the
leading TAB.
.SS Heredoc to Screen
.PP
Use a heredoc rather than a long series of
.B echo
commands for user dialogs.  Remember that a heredoc mimics a file,
so use
.BR cat " instead of " echo :
.IP
.EX
cat <<EOF
my_script [-s source] [-t target] [-h]

-s    Name of file to be read
-t    Name of file to write
-h    help (this display)

EOF
.EE

.SS Do-nothing Function
.PP
Suitable for a default callback in case a callback function is not
provided in certain situations:
.IP
.EX
do_nothing() { :; }
.EE
.SS Iterate Over Characters of a String
.PP
My testing shows this to be the fastest method:
.IP
.EX
# -r     to preserve backslashes
# -n1    to read one character at a time
# -d \(aq\(aq  disable end-of-entry delimiter
while IFS= read -r -n1 -d \(aq\(aq; do
   use_reply \(dq$REPLY\(dq
done <<< \(dq$string\(dq
.EE
.SS Parse String of Values Into an Array
.PP
Rather than parsing quote-enclosed phrases in a string, use
a system tool to separate the values:
.IP
.EX
# $1 is name of array variable
# $2 is string of values (ie 3 values in \fB1 \(dqthe best\(dq https://url.com\fP)
arrayify_string()
{
   local -n as_array=\(dq$1\(dq
   IFS=$\(aq\(rsn\(aq as_array=( $( xargs -n1 <<< \(dq$2\(dq ) )
}
.EE

