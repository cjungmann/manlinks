.TH Emacs Hints 7 2022-05-06
.
.ds Nm \fBEmacs\fP
.fp \n[.fp] C MS
.de C
.   br
.   ie n \[char27][38;2;255;255;128m \\$*
.   el \fC \\$*
..
.
.\" ==========================================================
.SH NAME
.\" ==========================================================
.B emacs_hints
\(em Detailed instructions for useful Emacs features
.
.\" ==========================================================
.SH SYNOPSIS
.\" ==========================================================
While it's not too hard to learn \*(Nm features, if you don't know
what's available, you may never know what you are missing.
.
.SH LOCAL VARIABLES
.PP
Syntax highlighting is directed by the current Emacs editing mode.
Emacs can usually guess the file type to set the correct editing
mode, considering the file's extension or some of its contents.
There are times when Emacs cannot guess, and it needs some help to
set the appropriate editing mode.
This can be done using
.BR "local variables" .
.PP
Local variables can be set at the top of the file or at the bottom,
both having a different syntax.
In both cases, the lines should be marked as comments of the
language in which the file is written.
Some modes may have submodes that can also be set in local variables.
.PP
Here is a top-of-file example, which should be in one of the top
two lines of the file:
.RS 4
.EX
# -*- mode: sh; sh-shell: bash -*-
.EE
.RE
.PP
Here is a bottom-of-file example for roff code:
.RS 4
.EX
\&.\(rs\(dq Local Variables:
\&.\(rs\(dq mode: nroff
\&.\(rs\(dq End:
.EE
.RE
.PP
Beware of top-of-file variables: there is a file size-threshhold beyond
which Emacs will no longer remember the variables.
.SH CUSTOM SYNTAX HIGHLIGHTING
.PP
Unhighlighted code can feel like a wall of letters.
I often put a commented line of asterisks, equals-signs, or dashes
just above function declarations so the red-rendered comment draws
my eye to the declaration.
.PP
\*(Nm offers another way: custom highligting.

.SS EDITING ~/.emacs.d/init.el
.PP
What I've done is use Emacs-lisp
.BR add-hook " and " highlight-regep
commands.
.PP
I will describe my latest effort, to highlight
.IR .TH ", " .SH ", and " .SS
requests.  Having these header elements stand out makes it
easier to find where you're working.
.PP
In this case, I created a new font-face to avoid unexpected
changes that may happen by using a built-in face.
Look at the following lisp code:
.PP
.C "(add-hook 'nroff-mode-hook '(lambda ()"
.C "         (defface nroff_header"
.C "           '((t (:background \(dq#336600\(dq)))"
.C "           \(dqDoc-string\(dq"
.C "           :group 'my-faces)"
.C "         (highlight-regexp \(dq^\\.TH.*\(dq 'nroff_header)"
.C "         (highlight-regexp \(dq^\\.SH.*\(dq 'nroff_header)"
.C "         (highlight-regexp \(dq^\\.SS.*\(dq 'nroff_header))"
.C "   )"
.\" ==========================================================
.SH DESCRIPTION
.\" ==========================================================
.SS Using Modes
.PP
\*(Nm provides a bounty of editing
.B modes
that empower users to do their best work.  Most of the time,
\*(Nm enables the appropriate mode according to the file being
edited, and the user doesn't have to think much about it.
.PP
However, sometimes \*(Nm can't identify the file type, and other
times the \*(Nm mode omits something a user would like.  In these
times, a more thorough understanding of \*(Nm modes can be very
helpful
.TP
.B Show details about the current mode
.br
This is probably the most useful command for discovering features
about a given mode.
.EX
.B C-h m
.EE
.TP
.B Get a list of modes
This is a bit crude, but it works.
.br
\(bu Use auto-completion to get a list of items that end in
.IR -mode .
.br
\(bu Use
.I C-x o
to select the completion window.
.br
\(bu Look around to modes appropriate for your work.
.SS Installing New Modes
.PP
.B Emacs
has a package manager that makes it easy to customize your
browser.
New editing modes are available in some of these packages.
Use the following short list of commands to learn how to
find and install packages.
.TP
.B m-x list-packages
.RS 7
.PP
Use this command to see what the package manager has available
for installation.
Ise familiar search commands to find packages of interest.
When you find a package to install, press
.PP
.RB \(lq i \(rq
for each package you want to select (a little
.RI \(lq i \(rq
will appear next to selected packages),
.PP
.RB \(lq u \(rq
to unmark a package, or
.PP
.RB \(lq x \(rq
to install your selected packages when you are done.
.RE
.TP
.B Adding a Package Source
There may be times when you know a package exists, but it cannot
be found in your package manager.
You may be able to add another packages source to your package
manager.
For example, I wanted to use
.BR php-mode ,
but it wasn't available in the default packages.
I needed to add the
.B MELPA
packages.
.RS 7
.PP
Add the following lines to your
.I ~/.emacs.d/init.el
file:
.RS 4
.PP
.EX
(require 'package)
(add-to-list 'package-archives
    '("melpa-stable" . "https://stable.melpa.org/packages/"))
(add-to-list 'package-archives
    '("melpa" . "https://melpa.org/packages/"))
.EE
.RE
.PP
.RB "Then restart " Emacs .
.RE



